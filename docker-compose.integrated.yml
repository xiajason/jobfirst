version: '3.8'

services:
  # API Gateway (Golang)
  gateway:
    build: ./gateway
    container_name: jobfirst-gateway
    ports:
      - "8000:8000"
    environment:
      - GATEWAY_PORT=8000
      - GATEWAY_HOST=0.0.0.0
      - JWT_SECRET=${JWT_SECRET:-your-secret-key}
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=60
    volumes:
      - ./gateway:/app
      - /app/tmp
    networks:
      - jobfirst-network
    restart: unless-stopped
    depends_on:
      - ai-service
      - user-service
      - resume-service

  # AI Service (Python Sanic)
  ai-service:
    build: ./ai-service
    container_name: jobfirst-ai-service
    ports:
      - "8001:8001"
    environment:
      # 服务配置
      - HOST=0.0.0.0
      - PORT=8001
      - DEBUG=false
      - WORKERS=4
      - ENV=production
      
      # 数据库配置
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=jobfirst
      - DB_USER=postgres
      - DB_PASSWORD=${POSTGRES_PASSWORD:-password}
      - DB_SSL_MODE=disable
      - DB_POOL_SIZE=20
      
      # Redis配置
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_PASSWORD=
      - REDIS_SSL=false
      
      # AI服务配置
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}
      - OPENAI_MAX_TOKENS=4000
      - OPENAI_TEMPERATURE=0.7
      
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - ANTHROPIC_MODEL=claude-3-sonnet-20240229
      
      - EMBEDDING_MODEL=text-embedding-ada-002
      - EMBEDDING_DIMENSIONS=1536
      
      # 向量数据库配置
      - VECTOR_DB_TYPE=postgresql
      - VECTOR_INDEX_TYPE=ivfflat
      - VECTOR_METRIC=cosine
      - VECTOR_DIMENSIONS=1536
      - VECTOR_SIMILARITY_THRESHOLD=0.7
      - VECTOR_MAX_RESULTS=100
      
      # 安全配置
      - SECRET_KEY=${AI_SECRET_KEY:-ai-secret-key}
      - JWT_SECRET=${AI_JWT_SECRET:-ai-jwt-secret}
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRE_MINUTES=30
      
      # 监控配置
      - PROMETHEUS_ENABLED=true
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - ENABLE_METRICS=true
      
    volumes:
      - ./ai-service:/app
      - ai_logs:/app/logs
      - ai_uploads:/app/uploads
    networks:
      - jobfirst-network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis

  # User Service (Golang)
  user-service:
    build: ./user
    container_name: jobfirst-user-service
    ports:
      - "8002:8000"
    environment:
      - SERVICE_PORT=8000
      - SERVICE_HOST=0.0.0.0
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=jobfirst
      - DB_USER=postgres
      - DB_PASSWORD=${POSTGRES_PASSWORD:-password}
      - DB_SSL_MODE=disable
      - JWT_SECRET=${JWT_SECRET:-your-secret-key}
    volumes:
      - ./user:/app
      - /app/tmp
    networks:
      - jobfirst-network
    restart: unless-stopped
    depends_on:
      - postgres

  # Resume Service (Golang)
  resume-service:
    build: ./resume
    container_name: jobfirst-resume-service
    ports:
      - "8003:8000"
    environment:
      - SERVICE_PORT=8000
      - SERVICE_HOST=0.0.0.0
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=jobfirst
      - DB_USER=postgres
      - DB_PASSWORD=${POSTGRES_PASSWORD:-password}
      - DB_SSL_MODE=disable
      - JWT_SECRET=${JWT_SECRET:-your-secret-key}
    volumes:
      - ./resume:/app
      - /app/tmp
    networks:
      - jobfirst-network
    restart: unless-stopped
    depends_on:
      - postgres

  # PostgreSQL Database
  postgres:
    image: pgvector/pgvector:pg15
    container_name: jobfirst-postgres
    environment:
      - POSTGRES_DB=jobfirst
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./ai-service/init-scripts:/docker-entrypoint-initdb.d/ai-init
    networks:
      - jobfirst-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: jobfirst-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - jobfirst-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: jobfirst-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - jobfirst-network
    restart: unless-stopped
    depends_on:
      - gateway
      - ai-service
      - user-service
      - resume-service

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: jobfirst-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - jobfirst-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: jobfirst-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - jobfirst-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  ai_logs:
  ai_uploads:

networks:
  jobfirst-network:
    driver: bridge
